version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mikrotik-portal-db
    environment:
      POSTGRES_DB: captive_portal
      POSTGRES_USER: portal_user
      POSTGRES_PASSWORD: portal_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - portal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portal_user -d captive_portal"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mikrotik-portal-backend
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_USER=portal_user
      - DB_PASSWORD=portal_password
      - DB_NAME=captive_portal
      - DB_PORT=5432
      - RADIUS_HOST=${RADIUS_HOST:-localhost}
      - RADIUS_PORT=${RADIUS_PORT:-1812}
      - RADIUS_SECRET=${RADIUS_SECRET:-testing123}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - ADMIN_TOKEN=${ADMIN_TOKEN:-your-admin-token-for-api-access}
      - PORT=3000
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./reports:/app/reports
    networks:
      - portal-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: npm start

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mikrotik-portal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - portal-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  portal-network:
    driver: bridge
